// Code generated by sysl DO NOT EDIT.
package plzserver

import (
	"context"

	"github.com/anz-bank/sysl-go/core"
	"github.com/joshcarp/plz-stop-the-sysl/gen/pkg/servers/myserver/depserver"
	pb "github.com/joshcarp/plz-stop-the-sysl/plzserver"

	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// GrpcServiceHandler for myserver API
type GrpcServiceHandler struct {
	pb.UnimplementedMyserverServer
	genCallback               core.GrpcGenCallback
	serviceInterface          *GrpcServiceInterface
	depserverDepserverService depserver.Service
}

// NewGrpcServiceHandler for myserver
func NewGrpcServiceHandler(
	genCallback core.GrpcGenCallback,
	serviceInterface *GrpcServiceInterface,
	depserverDepserverService depserver.Service,
) *GrpcServiceHandler {
	return &GrpcServiceHandler{
		genCallback:               genCallback,
		serviceInterface:          serviceInterface,
		depserverDepserverService: depserverDepserverService,
	}
}

// RegisterServer registers the myserver gRPC service
func (s *GrpcServiceHandler) RegisterServer(ctx context.Context, server *grpc.Server) {
	pb.RegisterMyserverServer(server, s)
}

// Hello ...
func (s *GrpcServiceHandler) Hello(ctx context.Context, req *pb.HelloRequest) (*pb.HelloResponse, error) {
	if s.serviceInterface.Hello == nil {
		return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
	}

	ctx, cancel := s.genCallback.DownstreamTimeoutContext(ctx)
	defer cancel()
	client := HelloClient{
		DepserverHello: s.depserverDepserverService.Hello,
	}

	return s.serviceInterface.Hello(ctx, req, client)
}
