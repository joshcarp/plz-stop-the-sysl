// Code generated by sysl DO NOT EDIT.
package plzserver

import (
	"context"

	"github.com/anz-bank/sysl-go/catalogservice"
	"github.com/anz-bank/sysl-go/common"
	"github.com/anz-bank/sysl-go/config"
	"github.com/anz-bank/sysl-go/core"
	"github.com/anz-bank/sysl-go/handlerinitialiser"
	"github.com/joshcarp/plz-stop-the-sysl/gen/pkg/servers/myserver/depserver"

	"github.com/go-chi/chi"
)

// DownstreamClients for myserver
type DownstreamClients struct {
	depserverClient depserver.myserverdepClient
}

// BuildGrpcHandlerInitialiser ...
func BuildGrpcHandlerInitialiser(serviceInterface GrpcServiceInterface, callback core.GrpcGenCallback, downstream *DownstreamClients) handlerinitialiser.GrpcHandlerInitialiser {
	serviceHandler := NewGrpcServiceHandler(callback, &serviceInterface, downstream.depserverClient)
	return serviceHandler
}

// BuildDownstreamClients ...
func BuildDownstreamClients(cfg *config.DefaultConfig) (*DownstreamClients, error) {
	var err error = nil
	depserverGRPCClient, depserverErr := core.BuildDownstreamGRPCClient("depserver", &cfg.GenCode.Downstream.(*DownstreamConfig).Depserver)
	if depserverErr != nil {
		return nil, depserverErr
	}

	depserverClient := depserver.NewmyserverdepClient(depserverGRPCClient)

	return &DownstreamClients{depserverClient: depserverClient}, err
}

// Serve starts the server.
//
// createService must be a function with the following signature:
//
//   func(ctx context.Context, config AppConfig) (*plzserver.ServiceInterface, error)
//
// where AppConfig is a type defined by the application programmer to
// hold application-level configuration.
func Serve(
	ctx context.Context,
	createService interface{},
) error {
	return core.Serve(
		ctx,
		&DownstreamConfig{}, createService, &ServiceInterface{},
		func(cfg *config.DefaultConfig, serviceIntf interface{}) (chi.Router, error) {
			serviceInterface := serviceIntf.(*ServiceInterface)

			genCallbacks := common.DefaultCallback()

			clients, err := BuildDownstreamClients(cfg)
			if err != nil {
				return nil, err
			}
			serviceHandler, err := NewServiceHandler(
				genCallbacks,
				serviceInterface,
				clients.depserverClient,
			)
			if err != nil {
				return nil, err
			}

			// Service Router
			router := chi.NewRouter()
			serviceRouter := NewServiceRouter(genCallbacks, serviceHandler)
			serviceRouter.WireRoutes(ctx, router)
			catalogservice.Enable(serviceRouter, router, AppSpec)
			return router, nil
		},
	)
}
