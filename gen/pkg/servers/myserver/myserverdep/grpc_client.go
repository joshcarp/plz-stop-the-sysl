// Code generated by sysl DO NOT EDIT.
package depserver

import (
	"context"
	"time"

	pb "github.com/joshcarp/plz-stop-the-sysl/dependency-server/depserver"

	"google.golang.org/grpc"
)

// Service interface for Myserverdep.
type Service interface {
	// Hello ...
	Hello(ctx context.Context, input *pb.HelloRequest) (*pb.HelloResponse, error)
}

// Client implements a client for Myserverdep.
type Client struct {
	client pb.MyserverdepClient
	addr   string
}

// NewClient creates a new Client.
func NewClient(addr string, connTimeout time.Duration) (*Client, error) {
	ctxWithTimeout, cancel := context.WithTimeout(context.Background(), connTimeout)
	defer cancel()

	conn, err := grpc.DialContext(ctxWithTimeout, addr, grpc.WithBlock())
	if err != nil {
		return nil, err
	}

	return &Client{pb.NewMyserverdepClient(conn), addr}, nil
}

// Hello ...
func (s *Client) Hello(ctx context.Context, input *pb.HelloRequest) (*pb.HelloResponse, error) {
	return s.client.Hello(ctx, input)
}
