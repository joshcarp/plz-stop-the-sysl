// Code generated by sysl DO NOT EDIT.
package visa

import (
	"context"

	"github.com/anz-bank/sysl-go/catalogservice"
	"github.com/anz-bank/sysl-go/common"
	"github.com/anz-bank/sysl-go/config"
	"github.com/anz-bank/sysl-go/core"
	"github.com/anz-bank/sysl-go/handlerinitialiser"

	"github.com/go-chi/chi"
)

// DownstreamClients for Visa
type DownstreamClients struct {
}

// BuildRestHandlerInitialiser ...
func BuildRestHandlerInitialiser(
	serviceInterface ServiceInterface,
	callback core.RestGenCallback,
	downstream *DownstreamClients,
) (handlerinitialiser.HandlerInitialiser, error) {
	serviceHandler, err := NewServiceHandler(callback, &serviceInterface)
	if err != nil {
		return nil, err
	}
	return NewServiceRouter(callback, serviceHandler), nil
}

// BuildDownstreamClients ...
func BuildDownstreamClients(cfg *config.DefaultConfig) (*DownstreamClients, error) {
	var err error = nil

	return &DownstreamClients{}, err
}

// Serve starts the server.
//
// createService must be a function with the following signature:
//
//   func(ctx context.Context, config AppConfig) (*visa.ServiceInterface, error)
//
// where AppConfig is a type defined by the application programmer to
// hold application-level configuration.
func Serve(
	ctx context.Context,
	createService interface{},
) error {
	return core.Serve(
		ctx,
		&DownstreamConfig{}, createService, &ServiceInterface{},
		func(cfg *config.DefaultConfig, serviceIntf interface{}) (chi.Router, error) {
			serviceInterface := serviceIntf.(*ServiceInterface)

			genCallbacks := common.DefaultCallback()

			serviceHandler, err := NewServiceHandler(
				genCallbacks,
				serviceInterface,
			)
			if err != nil {
				return nil, err
			}

			// Service Router
			router := chi.NewRouter()
			serviceRouter := NewServiceRouter(genCallbacks, serviceHandler)
			serviceRouter.WireRoutes(ctx, router)
			catalogservice.Enable(serviceRouter, router, AppSpec)
			return router, nil
		},
	)
}
